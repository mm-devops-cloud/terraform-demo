#variable
- i can map the variable on plan command and apply like 
    > terraform plan -var="instance_type=t3.large" -var="counts=1"

    > terraform apply -var="instance_type=t3.large" -var="counts=1"

- also i can use environment variables like :
    export TF_VAR_counts=1
    export TF_VAR_instance_type=t3.large

- also i can define them on file terraform.tfvars like i do on my code file
    if i name different file name than teerraform.tfvars i need to use this option when apply

    > terraform plan -var-file="web.tfvars"
    > terraform plan -var-file="app.tfvars"

- also i can define them on file under name ".auto.tfvars" this auto will map them
    like web.auto.tfvars

- sensitive variables :
    (
        * When using environment variables to set sensitive values, keep in mind that those values will be in your environment and command-line history Example: export TF_VAR_db_username=admin TF_VAR_db_password=adifferentpassword
        * When you use sensitive variables in your Terraform configuration, you can use them as you would any other variable.
        * Terraform will redact these values in command output and log files, and raise an error when it detects that they will be exposed in other ways.
        * Important Note-1: Never check-in secrets.tfvars to git repositories
        * Important Note-2: Terraform state file contains values for these sensitive variables terraform.tfstate. You must keep your state file secure to avoid exposing this data.

    )

examples :
    - list of variables :
        (
            # Implement List Function in variables.tf
            variable "instance_type" {
            description = "EC2 Instance Type"
            type = list(string)
            default = ["t3.micro", "t3.small", "t3.medium"]
            }

            # Reference Values from List in ec2-instance.tf
            instance_type = var.instance_type[0] --> t3.micro
            instance_type = var.instance_type[1] --> t3.small
            instance_type = var.instance_type[2] --> t3.medium

            # Initialize Terraform
            terraform init

            # Validate Terraform configuration files
            terraform validate

            # Format Terraform configuration files
            terraform fmt

            # Review the terraform plan
            terraform plan 
        )

    - map of variables :
        (
            # Implement Map Function for tags
            variable "ec2_instance_tags" {
            description = "EC2 Instance Tags"
            type = map(string)
            default = {
                "Name" = "ec2-web"
                "Tier" = "Web"
            }

            # Reference Values from Map in ec2-instance.tf
            tags = var.ec2_instance_tags  

            # Implement Map Function for Instance Type
            # Important Note: comment "ec2_instance_type" variable with list function
            variable "instance_type_map" {
            description = "EC2 Instance Type using maps"
            type = map(string)
            default = {
                "dev-apps" = "t3.micro"
                "stage-apps" = "t3.medium" 
                "prod-apps" = "t3.large"
            }

            # Reference Instance Type from Maps Variables
            instance_type = var.instance_type_map["dev-apps"]
            instance_type = var.instance_type_map["stage-apps"]
            instance_type = var.instance_type_map["prod-apps"]

            # Initialize Terraform
            terraform init

            # Validate Terraform configuration files
            terraform validate

            # Format Terraform configuration files
            terraform fmt

            # Review the terraform plan
            terraform plan 
        )
