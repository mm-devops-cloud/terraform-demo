best practice 3 way :
    - store on S3 :
        (
            - first will create bucket on S3 :  
                - Go to Services -> S3 -> Create Bucket
                - Bucket name: terraform-demo
                - Region: US-East (N.Virginia)
                - Bucket settings for Block Public Access: leave to defaults
                - Bucket Versioning: Enable
                - Rest all leave to defaults
                - Click on Create Bucket
                - Create Folder
                - Folder Name: prod
                - Click on Create Folder

            - then add backend on code :
                # Terraform Backend Block
                backend "s3" {
                    bucket = "terraform-demo"
                    key    = "prod/terraform.tfstate"
                    region = "us-east-1"    
                }
        )
    - store on dynamoDB :
        (
            - first will create a new table on dynamoDB:
                - Create Dynamo DB Table
                - Table Name: terraform-demo-state-table
                - Partition key (Primary Key): LockID (Type as String)
                - Table settings: Use default settings (checked)
                - Click on Create
            - then add backend on code :
                # Terraform Backend Block
                backend "s3" {
                    bucket = "terraform-demo"
                    key    = "prod/terraform.tfstate"
                    region = "us-east-1"  
                    
                    # For State Locking
                    dynamodb_table = "terraform-dev-state-table"
                }

                i use table for state locking
        )
    
    - Terraform cloud


Notes:
    - if i change file form terraform.tfstate to any name like prod.tfstate i need to path option when apply 
        > terraform apply -state="prod.tfstate" 
    - command for state :
        (
            Terraform Commands
            - terraform state list

            # Show the attributes of a single resource from Terraform State
            - terraform  state show data.aws_ami.amzlinux 

            # Remove Resources from Terraform State
            - terraform state rm aws_instance.my-ec2-vm-new

            - terraform state pull
            - terraform state push

            # Manually Unlock the State
            - terraform force-unlock LOCK_ID
            
            - terraform taint
            - terraform untaint
            - terraform apply target command
        )
    
